{
  "metadata": {
    "kernelspec": {
      "name": "xcpp17",
      "display_name": "C++17",
      "language": "cpp"
    },
    "language_info": {
      "codemirror_mode": "text/x-c++src",
      "file_extension": ".cpp",
      "mimetype": "text/x-c++src",
      "name": "C++",
      "version": "17"
    }
  },
  "nbformat_minor": 5,
  "nbformat": 4,
  "cells": [
    {
      "id": "69c1f13f-e730-459d-8c7c-542f5b8cfb78",
      "cell_type": "code",
      "source": "import keras\nkeras.__version__",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "49f3310f-02db-41f8-9946-e72de203941c",
      "cell_type": "code",
      "source": " from keras.preprocessing.image import load_img, img_to_array\n\n# This is the path to the image you want to transform.\ntarget_image_path = '/home/ubuntu/data/portrait.png'\n# This is the path to the style image.\nstyle_reference_image_path = '/home/ubuntu/data/popova.jpg'\n\n# Dimensions of the generated picture.\nwidth, height = load_img(target_image_path).size\nimg_height = 400\nimg_width = int(width * img_height / height)",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "64de6ea4-99dc-4a49-b21f-0d45e8678bf4",
      "cell_type": "code",
      "source": "import numpy as np\nfrom keras.applications import vgg19\n\ndef preprocess_image(image_path):\n    img = load_img(image_path, target_size=(img_height, img_width))\n    img = img_to_array(img)\n    img = np.expand_dims(img, axis=0)\n    img = vgg19.preprocess_input(img)\n    return img\n\ndef deprocess_image(x):\n    # Remove zero-center by mean pixel\n    x[:, :, 0] += 103.939\n    x[:, :, 1] += 116.779\n    x[:, :, 2] += 123.68\n    # 'BGR'->'RGB'\n    x = x[:, :, ::-1]\n    x = np.clip(x, 0, 255).astype('uint8')\n    return x",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "58ec5ec5-98a2-4dfb-8cb6-70a8b5ff8a00",
      "cell_type": "code",
      "source": "from keras import backend as K\n\ntarget_image = K.constant(preprocess_image(target_image_path))\nstyle_reference_image = K.constant(preprocess_image(style_reference_image_path))\n\n# This placeholder will contain our generated image\ncombination_image = K.placeholder((1, img_height, img_width, 3))\n\n# We combine the 3 images into a single batch\ninput_tensor = K.concatenate([target_image,\n                              style_reference_image,\n                              combination_image], axis=0)\n\n# We build the VGG19 network with our batch of 3 images as input.\n# The model will be loaded with pre-trained ImageNet weights.\nmodel = vgg19.VGG19(input_tensor=input_tensor,\n                    weights='imagenet',\n                    include_top=False)\nprint('Model loaded.')",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    },
    {
      "id": "62400029-a612-433d-ac72-c17eb27292de",
      "cell_type": "code",
      "source": "ef content_loss(base, combination):\n    return K.sum(K.square(combination - base))",
      "metadata": {
        "trusted": true
      },
      "outputs": [],
      "execution_count": null
    }
  ]
}